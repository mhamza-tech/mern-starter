// TODO: JT if one of your friends clicks on me, then I will reset to full capacity

// TODO: JT have him gift (3) waters as user prgresses thru this mini npc quest
// TODO: after user taps "yes", have him gift you water for your mission that lies ahead.

import {
  ActionResolver,
  ChatRoomActionContextApi,
  NewsfeedItemTemplate,
} from '../types'
import * as makerApi from '../api/MakerApi'
import Bluebird from 'bluebird'
import { sf, misc } from '../../utils'
import {
  NewsfeedItem,
  SaveImageInput,
  DynamicFeedItemLayout,
} from 'src/gql-types'
import _ from 'lodash'
import { registerReactionFnMap, ReactionFnMap, composeReactionFns } from '../../enginev3'

import { lotties, imageS3Key } from '../helpers'
import * as fxAddToInventory from '../fx/animation.addtoinventory'
import { incrementPositionOnMap, readPositionOnMap } from '../playerHelpers'
import { setGameState, getGameState, RootGameState, applyBackground } from '../chatRoomHelpers'
import { StaticNewsCards } from '../fxHelpers'
import * as messageBox from '../fx/animation.messagebox'
import * as DebugResetHandler from '../reactions/action.debug.reset'
import { SYSTEM_USER_EID } from 'src/env'

const numberValueLens = sf.lens('metadata.numberValue')

interface GameState extends RootGameState {
  sessionCount: number
  currentState: string
}

const log = console.log
const unObjectId = 'hairy_monster_1637'

const allStates = {
  notStarted: 'notStarted',
  start: 'start',
  hasBeenSprayed: 'hasBeenSprayed',
  hasBeenShaved: 'hasBeenShaved',
}

const INITIAL_GAME_STATE: GameState = {
  version: 1.0,
  lastVisit: Date.now(),
  sessionCount: 0,
  currentState: allStates.notStarted,
}

const onPlayerActionSpray = (contextApi: ChatRoomActionContextApi): Promise<any> => {
  return Promise.resolve(null)
    .then(() => transitionState(allStates.hasBeenSprayed, contextApi))
    // .then(() => updateActions(contextApi))
    .then(() => Bluebird.Promise.props({
      avatarImage: contextApi.getUnObject().getImage(),
    })
      .then(({ avatarImage }) => {
        const { s3Key } = avatarImage
        const avatarThumbBackgroundColor = contextApi.getUnObject().getKey('backgroundColor')
        return Promise.resolve('Thank you, now I can go on tinder dates!\nCould you style my hair so I look more handsome?')
          .then((message: string) =>
            Promise.all([
              messageBox.changeMessageBox(message, s3Key, avatarThumbBackgroundColor, contextApi),
            ]))
      })
    )
    .then(() => updateActions(contextApi))
    // .then(() => _.sample([1, 1, 1, 1, 3]) % 3 == 0)
    .then(() => true)
    .then(sf.thru_if(misc.isTrue)(
      () => createTinderDateNews(contextApi)
    )
    )
}

const onPlayerActionShave = (contextApi: ChatRoomActionContextApi): Promise<any> => {
  return Promise.resolve(null)
    .then(() => transitionState(allStates.hasBeenShaved, contextApi))
    .then(() => updateActions(contextApi))
    .then(() => Bluebird.Promise.props({
      avatarImage: contextApi.getUnObject().getImage(),
    }))
    .then(({ avatarImage }) => {
      const { s3Key } = avatarImage
      const avatarThumbBackgroundColor = contextApi.getUnObject().getKey('backgroundColor')
      return Promise.resolve('You\'re so nice, I\'m giving you a knife as a gift.')
        .then((message: string) => messageBox.changeMessageBox(message, s3Key, avatarThumbBackgroundColor, contextApi))
        .then(sf.pause(1000 * 4))
        .then(() => fxAddToInventory.animate(contextApi, imageS3Key.Knife))
        .then(() => 'You should explore the map and meet more friends.')
        .then((message: string) => messageBox.changeMessageBox(message, s3Key, avatarThumbBackgroundColor, contextApi))
    })
    .then(() => incrementPositionOnMap(contextApi.getActor()))
    // .then(() => incrementActionButtonInventoryWait(contextApi.getActor(), RewardedKnifeHandler.NAME, 1))
    // .then(() => _.sample([1, 1, 1, 1, 3]) % 3 == 0)
    .then(() => true)
    .then(sf.thru_if(misc.isTrue)(
      // () => contextApi.createNewsfeedItemUnObjectCard(`Helped {{ linkName unObject }} get ready for his tinder date!`)
      () => giftKnifeNews(contextApi)
    )
    )
  // .then(() => Promise.resolve(sf.pause(1000 * 4)))
}

const createTinderDateNews = (contextApi: ChatRoomActionContextApi): Promise<NewsfeedItem> => {
  const saveImageInput: SaveImageInput = {
    s3Key: _.sample([StaticNewsCards.JacobTinderDate]),
  }
  // const statusText = `TEST post generated by {{ linkName partner }} on behalf of {{ linkName actor }}`;
  const statusText = _.sample([
    '{{ linkName partner }} helped {{ linkName actor }} get ready for his tinder date!',
    '{{ linkName partner }} helped me get ready for my tinder date!',
    // , `Another geek has joined the Unreal ranks! Let's welcome {{ linkName partner }}.`
    // , `{{ linkName partner }} just joined our Unreal world. Let's all welcome {{ himher partner }}!`
  ])
  const input: NewsfeedItemTemplate = {
    layout: DynamicFeedItemLayout.Dynamic1,
    fromEid: SYSTEM_USER_EID,
    metadata: {
      statusText: statusText,
      image: saveImageInput,
    },
  }
  return makerApi.saveNewsfeedItem(contextApi.getContext(), input)
}

const giftKnifeNews = (contextApi: ChatRoomActionContextApi): Promise<NewsfeedItem> => {
  const saveImageInput: SaveImageInput = {
    s3Key: _.sample([StaticNewsCards.Knife1]),
  }
  // const statusText = `TEST post generated by {{ linkName partner }} on behalf of {{ linkName actor }}`;
  const statusText = _.sample([
    'I gifted {{ linkName partner }} a knife for {{ hisher partner }} adventures!',
  ])
  const input: NewsfeedItemTemplate = {
    layout: DynamicFeedItemLayout.Dynamic1,
    fromEid: SYSTEM_USER_EID,
    metadata: {
      statusText: statusText,
      image: saveImageInput,
    },
  }
  return makerApi.saveNewsfeedItem(contextApi.getContext(), input)
}

const transitionState = (newState: string, contextApi: ChatRoomActionContextApi): Promise<any> => {
  return Promise.resolve(null)
    .then(() => getGameState(contextApi))
    .then((gameState: GameState) => {
      _.merge(gameState, { currentState: newState })
      return setGameState(contextApi, gameState)
    })
}

const onEnter = (contextApi: ChatRoomActionContextApi): Promise<any> => {
  log('onEnter')
  return Promise.resolve(null)
    .then(() => readPositionOnMap(contextApi.getActor()))
    // .then(sf.tap((field: Field) => log('readPositionOnMap', { field })))
    .then(numberValueLens.get)
    .then((positionOnMap: number) => positionOnMap >= 1)
    .then(sf.thru_if_else(misc.isTrue)(
      () => {
        return Promise.resolve(null)
          // .then(() => removeAllTiles(contextApi))
          .then(() => getGameState(contextApi, INITIAL_GAME_STATE))
          .then((gameState: GameState) => {
            _.merge(gameState, { lastVisit: Date.now(), sessionCount: gameState.sessionCount + 1 })
            return setGameState(contextApi, gameState)
          })
          .then((gameState: GameState) => Bluebird.Promise.props({
            y: applyBackground(contextApi, lotties.clouds_2),
            z: contextApi.getActor().readOrCreateLocalActionEdges(localActionNames),
            gameState,
          }))
          .then(({ gameState }) => {
            const { currentState } = gameState
            if (_.isEqual(currentState, allStates.notStarted)) {
              const avatarThumbBackgroundColor = contextApi.getUnObject().getKey('backgroundColor')
              return transitionState(allStates.start, contextApi)
                .then(() => Bluebird.Promise.props({
                  avatarImage: contextApi.getUnObject().getImage(),
                })
                  .then(({ avatarImage }) => {
                    const { s3Key } = avatarImage
                    return Promise.resolve('I\'m stinky and lonely... can you spray me with some patchouli?')
                      .then(sf.tap((message: string) => messageBox.changeMessageBox(message, s3Key, avatarThumbBackgroundColor, contextApi)))
                  })
                )
            } else {
              return Promise.resolve(null)
            }
          })
          .then(() => updateActions(contextApi))
      }
    )(
      () => {
        return contextApi.getActor().sendSystemMessage('"Before, we interact, you should visit our friend Henry, the gnome."', {
          image: {
            s3Key: 'action/color/lock.png',
          },
        })
      }
    )
    )
}

// const removeAllTiles = (contextApi: ChatRoomActionContextApi): Promise<any> => {
//     return contextApi.getChatRoom().saveTiles([
//         // isDeletedLens.set(true)(onPoopJellyBeansAnimation),
//         // isDeletedLens.set(true)(messageTileTemplate),
//     ]);
// };

const onPlayerActionReset = (contextApi: ChatRoomActionContextApi): Promise<any> => {
  return Promise.all([
    // removeAllTiles(contextApi),
    messageBox.remove(contextApi),
    // fxAddToInventory.remove,

    setGameState(contextApi, {
      ...INITIAL_GAME_STATE,
    } as GameState),
    // saveActionButtonInventory(contextApi.getActor(), RewardedKnifeHandler.NAME, 0),
  ])
}

const updateActions = (contextApi: ChatRoomActionContextApi): Promise<any> => {
  return Promise.resolve(null)
    .then(() => getGameState(contextApi))
    .then((gameState: GameState) => {
      const { currentState } = gameState
      log(`currentState=${currentState}`)
      return Promise.resolve(null)
        .then(_.partial(contextApi.getActor().setCurrentActionEdges, stateActionGroups[currentState]))
    })
}

const localActions = {
  Patchouli: 'Action.HairyMonster.Patchouli',
  Shave: 'Action.HairyMonster.Shave',
}

const localActionNames = _.values(localActions)

/** 
 * Mapping from state => action set
 */
export const stateActionGroups = {

  [allStates.notStarted]: [],

  [allStates.start]: [
    localActions.Patchouli,
  ],

  [allStates.hasBeenSprayed]: [
    localActions.Shave,
  ],
}

const registerReactionFns = (): Promise<any> => {
  return registerReactionFnMap(unObjectId, {
    [DebugResetHandler.NAME]: composeReactionFns(
      onPlayerActionReset,
      onEnter
    ),

    [localActions.Patchouli]: composeReactionFns(
      onPlayerActionSpray
    ),

    [localActions.Shave]: composeReactionFns(
      onPlayerActionShave
    ),

  } as ReactionFnMap)
}

const actionResolver: ActionResolver = {
  unObjectId,
  onEnter,
  onReset: null,
  onLoad: registerReactionFns,
}

export default actionResolver
